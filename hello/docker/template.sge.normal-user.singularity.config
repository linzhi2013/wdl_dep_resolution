include required(classpath("application"))

webservice {
  port = 8000
  interface = master1120
  binding-timeout = 5s
}

backend {
  default = SGE_Singularity

  providers {
    SGE_Singularity {
      actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"

      config {

        # Limits the number of concurrent jobs
        concurrent-job-limit = 500

        # If an 'exit-code-timeout-seconds' value is specified:
        # - check-alive will be run at this interval for every job
        # - if a job is found to be not alive, and no RC file appears after this interval
        # - Then it will be marked as Failed.
        # Warning: If set, Cromwell will run 'check-alive' for every job at this interval

        # exit-code-timeout-seconds = 120

        # If the pipeline is run locally, we must set run-in-background = true;
        # This is because (see https://cromwell.readthedocs.io/en/stable/tutorials/Containers/#singularity):
        # As the 'Singularity exec' command does not emit a job-id, we must include the run-in-background
        # tag within the the provider section in addition to the docker-submit script. As Cromwell
        # watches for the existence of the rc file, the run-in-background option has the caveat
        # that we require the Singularity container to successfully complete,
        # otherwise the workflow might hang indefinitely.
        # run-in-background = true

        # `script-epilogue` configures a shell command to run after the execution of every command block.
        #
        # If this value is not set explicitly, the default value is `sync`, equivalent to:
        # script-epilogue = "sync"
        #
        # To turn off the default `sync` behavior set this value to an empty string:
        # script-epilogue = ""

        script-epilogue = "sync && sleep 8 "

        runtime-attributes = """
        String docker
        String root
        Int? cpu = 1
        Int? memory_gb = 2
        String? sge_queue
        """

        # This is very important to make sure we can use the File type variable
        # in SGE enviroments.
        # The value of dockerRoot must be the folder where you run your WDL pipeline,
        # appending the suffix '/cromwell-executions',
        # e.g. 
        # dockerRoot = "/export/personal/menggl/my_test/Hi-C_Assembly_pipeline/test/LibraryQC_FileType/cromwell-executions"
        #
        # We replace the '__DOCKER_ROOT__' to the real path whenever and whereever we run our WDL pipeline each time:
        dockerRoot = __DOCKER_ROOT__

        submit-docker  = """
        # Ensure we can use Singularity.
        # You can install (as root) the Singularity on any where via Conda or from its source codes
        # Thus, you may not need to activate the Singularity as me as below:
        source /export/personal/menggl/soft/miniconda3/bin/activate /export/personal/menggl/soft/miniconda3/envs/singularity

        # To covert local Docker images into Singularity images,
        # check https://github.com/singularityhub/docker2singularity
        # And place them in one place, e.g. '/export/personal/menggl/singularity_images/'
        #
        # Docker image name conversion
        DOCKER_NAME=$(sed -e 's/[^A-Za-z0-9._-]/_/g' <<< ${docker})
        # Where we can find the Singularity image
        IMAGE=/export/personal/menggl/images/singularity/Hi-C_Assembly_pipeline/$DOCKER_NAME.sif
        qsub \
        -terse \
        -V \
        -b y \
        -N ${job_name} \
        -wd ${cwd} \
        -o ${out}.qsub \
        -e ${err}.qsub \
        -l vf=${memory_gb}G \
        ${"-pe smp " + cpu} \
        ${"-q " + sge_queue} \
        singularity exec --bind ${cwd}:${docker_cwd} --bind ${root}:${root} $IMAGE /bin/sh ${script}
        """

        kill = "qdel ${job_id}"
        check-alive = "qstat -j ${job_id}"
        job-id-regex = "(\\d+)"

        kill-docker = "qdel ${job_id}"
        check-alive-docker = "qstat -j ${job_id}"
        job-id-regex-docker = "(\\d+)"


      }
    }
}
}
docker.hash-lookup.enabled = false

